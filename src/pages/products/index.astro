---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import ProductCard from '../../components/ProductCard';
import { getAllProducts, getAllTags } from '../../lib/products';

const allProducts = getAllProducts();
const allTags = getAllTags();
---

<Layout title="Products - AutoParts" description="Browse our complete catalog of premium automotive parts and accessories">
  <Header />
  
  <main class="flex-1">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <!-- Page Header -->
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900 mb-4">All Products</h1>
        <p class="text-lg text-gray-600">
          Browse our complete catalog of premium automotive parts and accessories
        </p>
      </div>

      <!-- Filters and Search -->
      <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8">
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <!-- Search -->
          <div>
            <label for="search" class="block text-sm font-medium text-gray-700 mb-2">
              Search Products
            </label>
            <input
              type="text"
              id="search"
              placeholder="Search by name or brand..."
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500 focus:border-gray-500"
            />
          </div>

          <!-- Category Filter -->
          <div>
            <label for="category" class="block text-sm font-medium text-gray-700 mb-2">
              Category
            </label>
            <select
              id="category"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500 focus:border-gray-500"
            >
              <option value="">All Categories</option>
              {allTags.map(tag => (
                <option value={tag}>{tag.charAt(0).toUpperCase() + tag.slice(1)}</option>
              ))}
            </select>
          </div>

          <!-- Sort -->
          <div>
            <label for="sort" class="block text-sm font-medium text-gray-700 mb-2">
              Sort By
            </label>
            <select
              id="sort"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500 focus:border-gray-500"
            >
              <option value="name">Name</option>
              <option value="price-asc">Price: Low to High</option>
              <option value="price-desc">Price: High to Low</option>
            </select>
          </div>
        </div>
      </div>

      <!-- Products Grid -->
      <div id="products-grid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {allProducts.map((product) => (
          <ProductCard key={product.id} product={product} client:load />
        ))}
      </div>

      <!-- No Results Message -->
      <div id="no-results" class="hidden text-center py-12">
        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
        <h3 class="mt-2 text-sm font-medium text-gray-900">No products found</h3>
        <p class="mt-1 text-sm text-gray-500">Try adjusting your search or filter criteria.</p>
      </div>
    </div>
  </main>
  
  <Footer />
</Layout>

<script>
  import { searchProducts, filterProductsByTag, sortProducts, getAllProducts } from '../../lib/products';
  
  const searchInput = document.getElementById('search') as HTMLInputElement;
  const categorySelect = document.getElementById('category') as HTMLSelectElement;
  const sortSelect = document.getElementById('sort') as HTMLSelectElement;
  const productsGrid = document.getElementById('products-grid') as HTMLElement;
  const noResults = document.getElementById('no-results') as HTMLElement;
  
  let allProducts = getAllProducts();
  let filteredProducts = [...allProducts];
  
  function renderProducts(products: any[]) {
    if (products.length === 0) {
      productsGrid.style.display = 'none';
      noResults.style.display = 'block';
      return;
    }
    
    productsGrid.style.display = 'grid';
    noResults.style.display = 'none';
    
    productsGrid.innerHTML = products.map(product => `
      <div class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
        <div class="aspect-w-1 aspect-h-1 w-full overflow-hidden bg-gray-200">
          <img
            src="${product.images[0]}"
            alt="${product.name}"
            class="h-48 w-full object-cover object-center"
            loading="lazy"
          />
        </div>
        
        <div class="p-4">
          <div class="mb-2">
            <h3 class="text-sm font-medium text-gray-900 line-clamp-2">
              <a href="/products/${product.slug}" class="hover:text-gray-600">
                ${product.name}
              </a>
            </h3>
            <p class="text-sm text-gray-500">${product.brand}</p>
          </div>
          
          <div class="flex items-center gap-2 mb-3">
            <span class="text-lg font-bold text-gray-900">
              $${product.price.toFixed(2)}
            </span>
            ${product.compareAtPrice ? `
              <span class="text-sm text-gray-500 line-through">
                $${product.compareAtPrice.toFixed(2)}
              </span>
            ` : ''}
          </div>
          
          <div class="flex items-center justify-between">
            <span class="text-xs px-2 py-1 rounded-full ${
              product.stock === 0 
                ? 'bg-gray-200 text-gray-700' 
                : product.stock <= 5 
                  ? 'bg-gray-300 text-gray-800'
                  : 'bg-gray-400 text-gray-900'
            }">
              ${product.stock === 0 ? 'Out of Stock' : `${product.stock} in stock`}
            </span>
            
            <a
              href="/products/${product.slug}"
              class="px-4 py-2 text-sm font-medium rounded-md transition-colors ${
                product.stock === 0
                  ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                  : 'bg-gray-700 text-white hover:bg-gray-800'
              }"
            >
              ${product.stock === 0 ? 'Out of Stock' : 'View Details'}
            </a>
          </div>
        </div>
      </div>
    `).join('');
  }
  
  function applyFilters() {
    const searchTerm = searchInput.value.toLowerCase();
    const selectedCategory = categorySelect.value;
    const sortBy = sortSelect.value as 'price-asc' | 'price-desc' | 'name';
    
    // Start with all products
    let products = [...allProducts];
    
    // Apply search filter
    if (searchTerm) {
      products = products.filter(product => 
        product.name.toLowerCase().includes(searchTerm) ||
        product.brand.toLowerCase().includes(searchTerm) ||
        product.tags.some((tag: string) => tag.toLowerCase().includes(searchTerm))
      );
    }
    
    // Apply category filter
    if (selectedCategory) {
      products = products.filter(product => product.tags.includes(selectedCategory));
    }
    
    // Apply sorting
    products = sortProducts(products, sortBy);
    
    filteredProducts = products;
    renderProducts(products);
  }
  
  // Event listeners
  searchInput.addEventListener('input', applyFilters);
  categorySelect.addEventListener('change', applyFilters);
  sortSelect.addEventListener('change', applyFilters);
  
  // Check for URL parameters
  const urlParams = new URLSearchParams(window.location.search);
  const tagParam = urlParams.get('tag');
  if (tagParam) {
    categorySelect.value = tagParam;
    applyFilters();
  }
</script>